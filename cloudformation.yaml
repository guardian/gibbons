AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Lambdas for handling expired CAPI keys
Parameters:
    Stack:
        Description: Stack name
        Type: String
        Default: content-api-gibbons
    App:
        Description: Application name
        Type: String
        Default: gibbons
    Stage:
        Description: Stage name
        Type: String
        AllowedValues:
            - PROD
            - CODE
        Default: CODE
    Origin:
        Description: Origin email address as set up in SES
        Type: String
    BonoboUrl:
        Description: Bonobo URL for listing user's keys
        Type: String
    Salt:
        Description: Secret see to hash IDs
        Type: String

Globals:
    Function:
        Environment:
            Variables:
                EMAIL_ORIGIN: !Ref Origin
                SALT: !Ref Salt
                BONOBO_URL: !Ref BonoboUrl
                BONOBO_USERS_TABLE: !Sub bonobo-${Stage}-users
        CodeUri:
            Bucket: content-api-dist
            Key: !Sub ${Stack}/${Stage}/${App}-reminder/${App}.jar
        MemorySize: 384
        Runtime: java8
        Timeout: 100
Resources:
    LambdaRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                             - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: LambdaPolicy
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource: "*"
                          - Effect: Allow
                            Action:
                                - dynamodb:Query
                                - dynamodb:Scan	
                                - dynamodb:GetItem
                                - dynamodb:DeleteItem
                                - dynamodb:UpdateItem
                            Resource:
                                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/bonobo-${Stage}-keys
                                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/bonobo-${Stage}-users
                          - Effect: Allow
                            Action:
                                - ses:SendEmail
                            Resource:
                                - "*"
                            Condition:
                                StringEquals:
                                    ses:FromAddress: !Ref Origin
    UserReminderLambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub gibbons-reminder-${Stage}
            Description: Lambda for sending email reminders to people owning old keys
            Handler: com.gu.gibbons.lambdas.UserReminderLambda::handleRequest
            Role: !Sub ${LambdaRole.Arn}
            Events:
                ScheduleLambda:
                    Type: Schedule
                    Properties:
                        Schedule: cron(12 14 * * * *) # run daily at 14:12
                        Input: "true"
        DependsOn: LambdaRole

    DidNotAnswerLambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub gibbons-cleanup-${Stage}
            Description: Lambda for cleaning up expired accounts and keys
            Handler: com.gu.gibbons.lambdas.UserDidNotAnswerLambda::handleRequest
            Role: !Sub ${LambdaRole.Arn}
            Events:
                ScheduleLambda:
                    Type: Schedule
                    Properties:
                        Schedule: cron(12 14 * * * *) # run daily at 14:12
                        Input: "true"
        DependsOn: LambdaRole
